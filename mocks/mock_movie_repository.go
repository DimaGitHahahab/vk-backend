// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/movie_repository.go
//
// Generated by this command:
//
//	mockgen -source=internal/repository/movie_repository.go -destination=mocks/mock_movie_repository.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"
	domain "vk-backend/internal/domain"

	gomock "go.uber.org/mock/gomock"
)

// MockMovieRepository is a mock of MovieRepository interface.
type MockMovieRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMovieRepositoryMockRecorder
}

// MockMovieRepositoryMockRecorder is the mock recorder for MockMovieRepository.
type MockMovieRepositoryMockRecorder struct {
	mock *MockMovieRepository
}

// NewMockMovieRepository creates a new mock instance.
func NewMockMovieRepository(ctrl *gomock.Controller) *MockMovieRepository {
	mock := &MockMovieRepository{ctrl: ctrl}
	mock.recorder = &MockMovieRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMovieRepository) EXPECT() *MockMovieRepositoryMockRecorder {
	return m.recorder
}

// ActorExists mocks base method.
func (m *MockMovieRepository) ActorExists(ctx context.Context, id int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActorExists", ctx, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ActorExists indicates an expected call of ActorExists.
func (mr *MockMovieRepositoryMockRecorder) ActorExists(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActorExists", reflect.TypeOf((*MockMovieRepository)(nil).ActorExists), ctx, id)
}

// AddMovie mocks base method.
func (m *MockMovieRepository) AddMovie(ctx context.Context, title, description string, releaseDate time.Time, rating float64, actors []*domain.Actor) (*domain.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMovie", ctx, title, description, releaseDate, rating, actors)
	ret0, _ := ret[0].(*domain.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddMovie indicates an expected call of AddMovie.
func (mr *MockMovieRepositoryMockRecorder) AddMovie(ctx, title, description, releaseDate, rating, actors any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMovie", reflect.TypeOf((*MockMovieRepository)(nil).AddMovie), ctx, title, description, releaseDate, rating, actors)
}

// DeleteMovie mocks base method.
func (m *MockMovieRepository) DeleteMovie(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMovie", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMovie indicates an expected call of DeleteMovie.
func (mr *MockMovieRepositoryMockRecorder) DeleteMovie(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMovie", reflect.TypeOf((*MockMovieRepository)(nil).DeleteMovie), ctx, id)
}

// FindMoviesByActorName mocks base method.
func (m *MockMovieRepository) FindMoviesByActorName(ctx context.Context, name string) ([]*domain.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMoviesByActorName", ctx, name)
	ret0, _ := ret[0].([]*domain.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMoviesByActorName indicates an expected call of FindMoviesByActorName.
func (mr *MockMovieRepositoryMockRecorder) FindMoviesByActorName(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMoviesByActorName", reflect.TypeOf((*MockMovieRepository)(nil).FindMoviesByActorName), ctx, name)
}

// FindMoviesByTitle mocks base method.
func (m *MockMovieRepository) FindMoviesByTitle(ctx context.Context, name string) ([]*domain.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMoviesByTitle", ctx, name)
	ret0, _ := ret[0].([]*domain.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMoviesByTitle indicates an expected call of FindMoviesByTitle.
func (mr *MockMovieRepositoryMockRecorder) FindMoviesByTitle(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMoviesByTitle", reflect.TypeOf((*MockMovieRepository)(nil).FindMoviesByTitle), ctx, name)
}

// GetActorsByMovieId mocks base method.
func (m *MockMovieRepository) GetActorsByMovieId(ctx context.Context, movieId int) ([]*domain.Actor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActorsByMovieId", ctx, movieId)
	ret0, _ := ret[0].([]*domain.Actor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActorsByMovieId indicates an expected call of GetActorsByMovieId.
func (mr *MockMovieRepositoryMockRecorder) GetActorsByMovieId(ctx, movieId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActorsByMovieId", reflect.TypeOf((*MockMovieRepository)(nil).GetActorsByMovieId), ctx, movieId)
}

// GetMovieById mocks base method.
func (m *MockMovieRepository) GetMovieById(ctx context.Context, id int) (*domain.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMovieById", ctx, id)
	ret0, _ := ret[0].(*domain.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMovieById indicates an expected call of GetMovieById.
func (mr *MockMovieRepositoryMockRecorder) GetMovieById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMovieById", reflect.TypeOf((*MockMovieRepository)(nil).GetMovieById), ctx, id)
}

// GetMoviesWithActor mocks base method.
func (m *MockMovieRepository) GetMoviesWithActor(ctx context.Context, actorId int) ([]*domain.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMoviesWithActor", ctx, actorId)
	ret0, _ := ret[0].([]*domain.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMoviesWithActor indicates an expected call of GetMoviesWithActor.
func (mr *MockMovieRepositoryMockRecorder) GetMoviesWithActor(ctx, actorId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMoviesWithActor", reflect.TypeOf((*MockMovieRepository)(nil).GetMoviesWithActor), ctx, actorId)
}

// ListMovies mocks base method.
func (m *MockMovieRepository) ListMovies(ctx context.Context) ([]*domain.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMovies", ctx)
	ret0, _ := ret[0].([]*domain.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMovies indicates an expected call of ListMovies.
func (mr *MockMovieRepositoryMockRecorder) ListMovies(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMovies", reflect.TypeOf((*MockMovieRepository)(nil).ListMovies), ctx)
}

// MovieExists mocks base method.
func (m *MockMovieRepository) MovieExists(ctx context.Context, id int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MovieExists", ctx, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MovieExists indicates an expected call of MovieExists.
func (mr *MockMovieRepositoryMockRecorder) MovieExists(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MovieExists", reflect.TypeOf((*MockMovieRepository)(nil).MovieExists), ctx, id)
}

// UpdateMovie mocks base method.
func (m *MockMovieRepository) UpdateMovie(ctx context.Context, new *domain.Movie) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMovie", ctx, new)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMovie indicates an expected call of UpdateMovie.
func (mr *MockMovieRepositoryMockRecorder) UpdateMovie(ctx, new any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMovie", reflect.TypeOf((*MockMovieRepository)(nil).UpdateMovie), ctx, new)
}
