// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/actor_repository.go
//
// Generated by this command:
//
//	mockgen -source=internal/repository/actor_repository.go -destination=mocks/mock_actor_repository.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"
	domain "vk-backend/internal/domain"

	gomock "go.uber.org/mock/gomock"
)

// MockActorRepository is a mock of ActorRepository interface.
type MockActorRepository struct {
	ctrl     *gomock.Controller
	recorder *MockActorRepositoryMockRecorder
}

// MockActorRepositoryMockRecorder is the mock recorder for MockActorRepository.
type MockActorRepositoryMockRecorder struct {
	mock *MockActorRepository
}

// NewMockActorRepository creates a new mock instance.
func NewMockActorRepository(ctrl *gomock.Controller) *MockActorRepository {
	mock := &MockActorRepository{ctrl: ctrl}
	mock.recorder = &MockActorRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActorRepository) EXPECT() *MockActorRepositoryMockRecorder {
	return m.recorder
}

// ActorExists mocks base method.
func (m *MockActorRepository) ActorExists(ctx context.Context, id int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActorExists", ctx, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ActorExists indicates an expected call of ActorExists.
func (mr *MockActorRepositoryMockRecorder) ActorExists(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActorExists", reflect.TypeOf((*MockActorRepository)(nil).ActorExists), ctx, id)
}

// AddActor mocks base method.
func (m *MockActorRepository) AddActor(ctx context.Context, name string, gender int, birthDate time.Time) (*domain.Actor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddActor", ctx, name, gender, birthDate)
	ret0, _ := ret[0].(*domain.Actor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddActor indicates an expected call of AddActor.
func (mr *MockActorRepositoryMockRecorder) AddActor(ctx, name, gender, birthDate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddActor", reflect.TypeOf((*MockActorRepository)(nil).AddActor), ctx, name, gender, birthDate)
}

// DeleteActor mocks base method.
func (m *MockActorRepository) DeleteActor(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteActor", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteActor indicates an expected call of DeleteActor.
func (mr *MockActorRepositoryMockRecorder) DeleteActor(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteActor", reflect.TypeOf((*MockActorRepository)(nil).DeleteActor), ctx, id)
}

// GetActorById mocks base method.
func (m *MockActorRepository) GetActorById(ctx context.Context, id int) (*domain.Actor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActorById", ctx, id)
	ret0, _ := ret[0].(*domain.Actor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActorById indicates an expected call of GetActorById.
func (mr *MockActorRepositoryMockRecorder) GetActorById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActorById", reflect.TypeOf((*MockActorRepository)(nil).GetActorById), ctx, id)
}

// ListActors mocks base method.
func (m *MockActorRepository) ListActors(ctx context.Context) ([]*domain.Actor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListActors", ctx)
	ret0, _ := ret[0].([]*domain.Actor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListActors indicates an expected call of ListActors.
func (mr *MockActorRepositoryMockRecorder) ListActors(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListActors", reflect.TypeOf((*MockActorRepository)(nil).ListActors), ctx)
}

// MovieExists mocks base method.
func (m *MockActorRepository) MovieExists(ctx context.Context, id int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MovieExists", ctx, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MovieExists indicates an expected call of MovieExists.
func (mr *MockActorRepositoryMockRecorder) MovieExists(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MovieExists", reflect.TypeOf((*MockActorRepository)(nil).MovieExists), ctx, id)
}

// UpdateActor mocks base method.
func (m *MockActorRepository) UpdateActor(ctx context.Context, new *domain.Actor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateActor", ctx, new)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateActor indicates an expected call of UpdateActor.
func (mr *MockActorRepositoryMockRecorder) UpdateActor(ctx, new any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateActor", reflect.TypeOf((*MockActorRepository)(nil).UpdateActor), ctx, new)
}
